"use client";

import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { vapi } from "@/lib/vapi";
import { useUser } from "@clerk/nextjs";
import Image from "next/image";
import { useRouter } f                <div className="relative w-full h-full rounded-full bg-card flex items-center justify-center border border-border overflow-hidden group-hover/avatar:border-primary/50 transition-all duration-300">
                  <div className="absolute inset-0 bg-gradient-to-b from-primary/10 to-secondary/10"></div>
                  {/* eslint-disable-next-line */}
                  <img
                    src="/ai-avatar.png"
                    alt="AI Assistant"
                    className="w-full h-full object-cover"
                    onError={() => {
                      console.error("Error loading AI avatar image");
                    }}
                  />
                  {/* Scan effect */}
                  <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/10 to-transparent opacity-0 group-hover/avatar:opacity-100 animate-scanline"></div>
                </div>ation";
import { useEffect, useRef, useState } from "react";

const GenerateProgramPage = () => {
  const [callActive, setCallActive] = useState(false);
  const [connecting, setConnecting] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [messages, setMessages] = useState<any[]>([]);
  const [callEnded, setCallEnded] = useState(false);

  const { user } = useUser();
  const router = useRouter();

  const messageContainerRef = useRef<HTMLDivElement>(null);

  // SOLUTION to get rid of "Meeting has ended" error
  useEffect(() => {
    const originalError = console.error;
    // override console.error to ignore "Meeting has ended" errors
    console.error = function (msg, ...args) {
      if (
        msg &&
        (msg.includes("Meeting has ended") ||
          (args[0] && args[0].toString().includes("Meeting has ended")))
      ) {
        console.log("Ignoring known error: Meeting has ended");
        return; // don't pass to original handler
      }

      // pass all other errors to the original handler
      return originalError.call(console, msg, ...args);
    };

    // restore original handler on unmount
    return () => {
      console.error = originalError;
    };
  }, []);

  // auto-scroll messages
  useEffect(() => {
    if (messageContainerRef.current) {
      messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;
    }
  }, [messages]);

  // navigate user to profile page after the call ends
  useEffect(() => {
    if (callEnded) {
      const redirectTimer = setTimeout(() => {
        router.push("/profile");
      }, 1500);

      return () => clearTimeout(redirectTimer);
    }
  }, [callEnded, router]);

  // setup event listeners for vapi
  useEffect(() => {
    const handleCallStart = () => {
      console.log("Call started");
      setConnecting(false);
      setCallActive(true);
      setCallEnded(false);
    };

    const handleCallEnd = () => {
      console.log("Call ended");
      setCallActive(false);
      setConnecting(false);
      setIsSpeaking(false);
      setCallEnded(true);
    };

    const handleSpeechStart = () => {
      console.log("AI started Speaking");
      setIsSpeaking(true);
    };

    const handleSpeechEnd = () => {
      console.log("AI stopped Speaking");
      setIsSpeaking(false);
    };
    const handleMessage = (message: any) => {
      if (message.type === "transcript" && message.transcriptType === "final") {
        const newMessage = { content: message.transcript, role: message.role };
        setMessages((prev) => [...prev, newMessage]);
      }
    };

    const handleError = (error: any) => {
      console.log("Vapi Error", error);
      setConnecting(false);
      setCallActive(false);
    };

    vapi
      .on("call-start", handleCallStart)
      .on("call-end", handleCallEnd)
      .on("speech-start", handleSpeechStart)
      .on("speech-end", handleSpeechEnd)
      .on("message", handleMessage)
      .on("error", handleError);

    // cleanup event listeners on unmount
    return () => {
      vapi
        .off("call-start", handleCallStart)
        .off("call-end", handleCallEnd)
        .off("speech-start", handleSpeechStart)
        .off("speech-end", handleSpeechEnd)
        .off("message", handleMessage)
        .off("error", handleError);
    };
  }, []);

  const toggleCall = async () => {
    if (callActive) vapi.stop();
    else {
      try {
        setConnecting(true);
        setMessages([]);
        setCallEnded(false);

        const fullName = user?.firstName
          ? `${user.firstName} ${user.lastName || ""}`.trim()
          : "There";

        await vapi.start(process.env.NEXT_PUBLIC_VAPI_WORKFLOW_ID!, {
          variableValues: {
            full_name: fullName,
            user_id: user?.id,
          },
        });
      } catch (error) {
        console.log("Failed to start call", error);
        setConnecting(false);
      }
    }
  };

  return (
    <div className="flex flex-col min-h-screen text-foreground overflow-hidden pb-6 pt-24 relative">
      {/* Background cyber elements */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-[10%] left-[8%] w-20 h-20 rounded-full border border-primary/10 animate-[spin_30s_linear_infinite]"></div>
        <div className="absolute bottom-[15%] right-[10%] w-16 h-16 rounded-full border border-primary/5 animate-[spin_40s_linear_reverse_infinite]"></div>

        {/* Data nodes */}
        <div className="absolute h-1 w-1 bg-primary/20 rounded-full top-[25%] right-[20%] animate-pulse"></div>
        <div className="absolute h-1 w-1 bg-primary/30 rounded-full bottom-[30%] left-[25%] animate-pulse delay-1000"></div>
        <div className="absolute h-1.5 w-1.5 bg-primary/20 rounded-full top-[50%] left-[10%] animate-pulse delay-700"></div>
        <div className="absolute h-1 w-1 bg-primary/30 rounded-full bottom-[20%] right-[15%] animate-pulse delay-300"></div>
        
        {/* Scanlines */}
        <div className="absolute h-screen w-full left-0 top-0 bg-[linear-gradient(to_bottom,transparent_50%,rgba(255,42,109,0.02)_50%)] bg-[length:100%_4px] pointer-events-none opacity-30"></div>
      </div>

      <div className="container mx-auto px-4 h-full max-w-5xl relative z-10">
        {/* Title */}
        <div className="text-center mb-8 relative group">
          <div className="absolute -inset-1 bg-gradient-to-r from-primary/20 via-transparent to-primary/20 opacity-0 group-hover:opacity-100 rounded-lg blur-xl transition-all duration-1000"></div>
          <h1 className="text-3xl md:text-4xl font-bold font-mono relative">
            <span className="relative inline-block group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-foreground group-hover:via-primary/80 group-hover:to-foreground transition-all duration-700">Generate Your </span>
            <span className="text-primary uppercase relative">
              FITNESS PROGRAM
              <span className="absolute -bottom-1 left-0 w-0 h-[2px] bg-gradient-to-r from-primary/50 to-transparent group-hover:w-full transition-all duration-700 ease-in-out"></span>
            </span>
          </h1>
          <p className="text-muted-foreground mt-2 relative inline-block">
            Have a voice conversation with our AI assistant to create your personalized plan
            <span className="absolute -bottom-1 left-0 w-0 h-px bg-gradient-to-r from-primary/40 to-transparent group-hover:w-full transition-all duration-700 ease-in-out"></span>
          </p>
        </div>

        {/* VIDEO CALL AREA */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          {/* AI ASSISTANT CARD */}
          <Card className="bg-card/90 backdrop-blur-sm border border-border overflow-hidden relative group hover:shadow-[0_0_20px_rgba(255,42,109,0.15)] transition-all duration-500">
            {/* Animated scan line */}
            <div className="absolute h-px w-full left-0 bg-gradient-to-r from-transparent via-[#ff2a6d30] to-transparent opacity-0 group-hover:opacity-100 animate-scan-horizontal" style={{ animationDuration: '4s', top: '30%' }}></div>
            
            {/* Corner elements */}
            <div className="absolute top-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute top-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            
            <div className="aspect-video flex flex-col items-center justify-center p-6 relative">
              {/* AI VOICE ANIMATION */}
              <div
                className={`absolute inset-0 ${
                  isSpeaking ? "opacity-30" : "opacity-0"
                } transition-opacity duration-300`}
              >
                {/* Voice wave animation when speaking */}
                <div className="absolute left-0 right-0 top-1/2 -translate-y-1/2 flex justify-center items-center h-20">
                  {[...Array(5)].map((_, i) => (
                    <div
                      key={i}
                      className={`mx-1 h-16 w-1 bg-primary rounded-full ${
                        isSpeaking ? "animate-sound-wave" : ""
                      }`}
                      style={{
                        animationDelay: `${i * 0.1}s`,
                        height: isSpeaking ? `${Math.random() * 50 + 20}%` : "5%",
                      }}
                    />
                  ))}
                </div>
              </div>

              {/* AI IMAGE */}
              <div className="relative size-32 mb-4 group/avatar hover:scale-105 transition-all duration-300">
                <div
                  className={`absolute inset-0 bg-primary opacity-10 rounded-full blur-lg ${
                    isSpeaking ? "animate-pulse" : ""
                  } group-hover/avatar:opacity-30 transition-opacity duration-300`}
                />

                <div className="relative w-full h-full rounded-full bg-card flex items-center justify-center border border-border overflow-hidden group-hover/avatar:border-primary/50 transition-all duration-300">
                  <div className="absolute inset-0 bg-gradient-to-b from-primary/10 to-secondary/10"></div>
                  <img
                    src="/ai-avatar.png"
                    alt="AI Assistant"
                    className="w-full h-full object-cover"
                    onError={() => {
                      console.error("Error loading AI avatar image");
                    }}
                  />
                  {/* Scan effect */}
                  <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/10 to-transparent opacity-0 group-hover/avatar:opacity-100 animate-scanline"></div>
                </div>
                
                {/* Energy ring */}
                <div className="absolute -inset-3 border border-primary/0 rounded-full group-hover/avatar:border-primary/20 group-hover/avatar:animate-energy-ring"></div>
              </div>

              <h2 className="text-xl font-bold text-foreground group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-foreground group-hover:via-primary group-hover:to-foreground transition-all duration-700">VinsaFit.ai</h2>
              <p className="text-sm text-muted-foreground mt-1 relative inline-block">
                Fitness & Diet Coach
                <span className="absolute -bottom-1 left-0 w-0 h-px bg-gradient-to-r from-primary/40 to-transparent group-hover:w-full transition-all duration-700 ease-in-out"></span>
              </p>

              {/* SPEAKING INDICATOR */}
              <div
                className={`mt-4 flex items-center gap-2 px-3 py-1 rounded-full bg-card border transition-all duration-300 ${
                  isSpeaking ? "border-primary shadow-[0_0_10px_rgba(255,42,109,0.2)]" : "border-border"
                } group-hover:border-primary/50 group-hover:scale-105 overflow-hidden`}
              >
                <div
                  className={`w-2 h-2 rounded-full transition-colors duration-300 ${
                    isSpeaking ? "bg-primary animate-pulse" : "bg-muted"
                  } group-hover:bg-primary/70`}
                />

                <span className="text-xs text-muted-foreground group-hover:text-primary/80 transition-colors duration-300 relative">
                  {isSpeaking
                    ? "Speaking..."
                    : callActive
                      ? "Listening..."
                      : callEnded
                        ? "Redirecting to profile..."
                        : "Waiting..."}
                  <span className="absolute bottom-0 left-0 h-px w-0 bg-gradient-to-r from-primary/20 to-transparent group-hover:w-full transition-all duration-1000"></span>
                </span>
                
                {/* Data flowing effect when active */}
                {(callActive || isSpeaking) && (
                  <>
                    <div className="absolute -right-4 top-0 h-px w-8 bg-primary/30 animate-data-flow delay-300"></div>
                    <div className="absolute -right-8 bottom-0 h-px w-8 bg-primary/30 animate-data-flow delay-700"></div>
                  </>
                )}
              </div>
            </div>
          </Card>

          {/* USER CARD */}
          <Card className={`bg-card/90 backdrop-blur-sm border border-border overflow-hidden relative group hover:shadow-[0_0_20px_rgba(255,42,109,0.15)] transition-all duration-500`}>
            {/* Animated scan line */}
            <div className="absolute h-px w-full left-0 bg-gradient-to-r from-transparent via-[#ff2a6d30] to-transparent opacity-0 group-hover:opacity-100 animate-scan-horizontal" style={{ animationDuration: '4s', top: '70%' }}></div>
            
            {/* Corner elements */}
            <div className="absolute top-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute top-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>

            <div className="aspect-video flex flex-col items-center justify-center p-6 relative">
              {/* User Image */}
              <div className="relative size-32 mb-4 group/avatar hover:scale-105 transition-all duration-300">
                <div className="absolute inset-0 bg-primary/0 group-hover/avatar:bg-primary/10 rounded-full blur-lg transition-all duration-300"></div>
                <div className="relative w-full h-full rounded-full bg-card flex items-center justify-center border border-border overflow-hidden group-hover/avatar:border-primary/50 transition-all duration-300">
                  <img
                    src={user?.imageUrl}
                    alt="User"
                    className="size-full object-cover rounded-full"
                  />
                  {/* Scan effect */}
                  <div className="absolute inset-0 bg-gradient-to-b from-transparent via-primary/10 to-transparent opacity-0 group-hover/avatar:opacity-100 animate-scanline"></div>
                </div>
                
                {/* Energy ring */}
                <div className="absolute -inset-3 border border-primary/0 rounded-full group-hover/avatar:border-primary/20 group-hover/avatar:animate-energy-ring"></div>
              </div>

              <h2 className="text-xl font-bold text-foreground group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-foreground group-hover:via-primary group-hover:to-foreground transition-all duration-700">You</h2>
              <p className="text-sm text-muted-foreground mt-1 relative inline-block">
                {user ? (user.firstName + " " + (user.lastName || "")).trim() : "Guest"}
                <span className="absolute -bottom-1 left-0 w-0 h-px bg-gradient-to-r from-primary/40 to-transparent group-hover:w-full transition-all duration-700 ease-in-out"></span>
              </p>

              {/* User Ready Text */}
              <div className={`mt-4 flex items-center gap-2 px-3 py-1 rounded-full bg-card border border-border group-hover:border-primary/50 transition-all duration-300 group-hover:scale-105 overflow-hidden`}>
                <div className={`w-2 h-2 rounded-full bg-muted group-hover:bg-primary/70 transition-colors duration-300`} />
                <span className="text-xs text-muted-foreground group-hover:text-primary/80 transition-colors duration-300 relative">
                  Ready
                  <span className="absolute bottom-0 left-0 h-px w-0 bg-gradient-to-r from-primary/20 to-transparent group-hover:w-full transition-all duration-1000"></span>
                </span>
                
                {/* Data flowing effect */}
                <div className="absolute -right-4 top-0 h-px w-8 bg-primary/0 group-hover:bg-primary/30 animate-data-flow opacity-0 group-hover:opacity-100 delay-300"></div>
                <div className="absolute -right-8 bottom-0 h-px w-8 bg-primary/0 group-hover:bg-primary/30 animate-data-flow opacity-0 group-hover:opacity-100 delay-700"></div>
              </div>
            </div>
          </Card>
        </div>

        {/* MESSAGE CONTAINER  */}
        {messages.length > 0 && (
          <div
            ref={messageContainerRef}
            className="w-full bg-card/90 backdrop-blur-sm border border-border rounded-xl p-4 mb-8 h-64 overflow-y-auto transition-all duration-300 scroll-smooth group hover:shadow-[0_0_20px_rgba(255,42,109,0.15)] relative"
          >
            {/* Corner elements */}
            <div className="absolute top-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute top-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 left-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 left-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 right-0 w-0 h-px bg-primary group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 right-0 h-0 w-px bg-primary group-hover:h-full transition-all duration-500"></div>
            </div>
            
            {/* Animated scan line */}
            <div className="absolute h-px w-full left-0 bg-gradient-to-r from-transparent via-[#ff2a6d30] to-transparent opacity-0 group-hover:opacity-100 animate-scan-horizontal" style={{ animationDuration: '3s', top: '50%' }}></div>

            <div className="space-y-3">
              {messages.map((msg, index) => (
                <div key={index} className="message-item animate-fadeIn hover:bg-primary/5 p-2 rounded-md transition-all duration-300 group/message">
                  <div className="font-semibold text-xs text-muted-foreground mb-1 group-hover/message:text-primary/70 transition-colors duration-300">
                    {msg.role === "assistant" ? "VinsaFit AI" : "You"}:
                  </div>
                  <p className="text-foreground group-hover/message:text-foreground/90 transition-colors duration-300 relative">
                    {msg.content}
                    <span className="absolute bottom-0 left-0 h-px w-0 bg-gradient-to-r from-primary/20 to-transparent group-hover/message:w-full transition-all duration-1000"></span>
                  </p>
                </div>
              ))}

              {callEnded && (
                <div className="message-item animate-fadeIn hover:bg-primary/5 p-2 rounded-md transition-all duration-300 group/message border-l-2 border-primary/30">
                  <div className="font-semibold text-xs text-primary mb-1">System:</div>
                  <p className="text-foreground group-hover/message:text-foreground/90 transition-colors duration-300 relative">
                    Your fitness program has been created! Redirecting to your profile...
                    <span className="absolute bottom-0 left-0 h-px w-0 bg-gradient-to-r from-primary/20 to-transparent group-hover/message:w-full transition-all duration-1000"></span>
                  </p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* CALL CONTROLS */}
        <div className="w-full flex justify-center gap-4">
          <Button
            className={`w-40 text-xl rounded-3xl ${
              callActive
                ? "bg-destructive hover:bg-destructive/90"
                : callEnded
                  ? "bg-green-600 hover:bg-green-700"
                  : "bg-primary hover:bg-primary/90"
            } text-white relative group overflow-hidden`}
            onClick={toggleCall}
            disabled={connecting || callEnded}
          >
            {/* Button glow effect */}
            <span className="absolute inset-0 w-full h-full bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 blur-sm transition-opacity duration-300"></span>
            
            {/* Connecting animation */}
            {connecting && (
              <span className="absolute inset-0 rounded-full animate-ping bg-primary/50 opacity-75"></span>
            )}
            
            {/* Data flow when active */}
            {callActive && (
              <>
                <span className="absolute top-0 left-[30%] h-full w-px bg-white/20 animate-data-flow delay-100"></span>
                <span className="absolute top-0 left-[60%] h-full w-px bg-white/20 animate-data-flow delay-300"></span>
              </>
            )}
            
            {/* Corner elements */}
            <div className="absolute top-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 left-0 w-0 h-px bg-white/50 group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 left-0 h-0 w-px bg-white/50 group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute top-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute top-0 right-0 w-0 h-px bg-white/50 group-hover:w-full transition-all duration-500"></div>
              <div className="absolute top-0 right-0 h-0 w-px bg-white/50 group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 left-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 left-0 w-0 h-px bg-white/50 group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 left-0 h-0 w-px bg-white/50 group-hover:h-full transition-all duration-500"></div>
            </div>
            <div className="absolute bottom-0 right-0 w-4 h-4 overflow-hidden opacity-0 group-hover:opacity-100 transition-all duration-300">
              <div className="absolute bottom-0 right-0 w-0 h-px bg-white/50 group-hover:w-full transition-all duration-500"></div>
              <div className="absolute bottom-0 right-0 h-0 w-px bg-white/50 group-hover:h-full transition-all duration-500"></div>
            </div>

            <span className="relative z-10">
              {callActive
                ? "End Call"
                : connecting
                  ? "Connecting..."
                  : callEnded
                    ? "View Profile"
                    : "Start Call"}
            </span>
          </Button>
        </div>
      </div>
    </div>
  );
};
export default GenerateProgramPage;